h = 1:1000
h
mean(h)
EMA(h)
plot(h)
install.packages("quantmod")
EMA(h)
h
h = h+h
h
mean(h)
h/12341234124
1-9
(1-2)
1231234/1234123412423
pi
print h
h
h
h = 12:43
h
plot h
plot(h)
demo()
demo(graphics)
demo(Japanese)
demo(package = .packages(all.available = TRUE))
demo(image())
demos)quantmod::add_DEMA()
demos.quantmod()
demos(quantmod)
demo(chartSeries)
demo(quantmod)
demo(lattice)
demo(graphics.off(Hershey))
demo(zoo)
help
help()
aefsd
demos
demo
demo(zoo)
demo()
http://citibank.com.au/
install.packages(z00)
install.packages(zoo)
library("zoo", lib.loc="/usr/local/lib/R/3.2/site-library")
library("zoo", lib.loc="/usr/local/lib/R/3.2/site-library")
install.packages(zoo)
library("zoo")
install.packages(zoo)
aapl
aapl<-read.zoo("aapl.csv", + sep=",", header=TRUE, format = ("%Y-%m-%d"))
plot(aapl)
aapl = 1
aapl
aapl<-read.zoo("aapl.csv", + sep=",", header=TRUE, format = ("%Y-%m-%d"))
library("quantmod", lib.loc="/usr/local/lib/R/3.2/site-library")
install.packages(c("boot", "Matrix", "mgcv", "nlme", "nnet"), lib="/usr/local/Cellar/r/3.2.3/R.framework/Versions/3.2/Resources/library")
install.packages("Quandl")
Quandl("YAHOO/ASX_FMG_AX")
library("Quandl", lib.loc="/usr/local/lib/R/3.2/site-library")
Quandl("YAHOO/ASX_FMG_AX")
Quandl("YAHOO/ASX_FMG_AX")
library("curl", lib.loc="/usr/local/lib/R/3.2/site-library")
FMG = Quandl("YAHOO/ASX_FMG_AX")
plot(FMG)
FMG
getwd()
cd RStudio
getwd()
getwd()
cd()
ls()
dir()
39
s = 3214234
s
library(datasets)
data(iris)
?iris
class(iris)
iris
mean(iris[,1])
lapply(iris,mean[,1])
apply(iris[,1], mean)
mean(iris[101:150,1])
apply(iris[, 1:4], 1, mean)
?apply
apply(iris[, 1:4], 2, mean)
?rnorm
install.packages("gfortran")
library(datasets)
data(mtcars)
data(mtcars)
?mtcars
?rnorm
install.packages("quantstrat", repos="http://R-Forge.R-project.org", type="source")
install.packages("quantstrat", repos="http://R-Forge.R-project.org", type="source")
install.packages("~/Downloads/blotter_0.9.1741.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/quantstrat_0.9.1739.tar.gz", repos = NULL, type = "source")
install.packages("PerformanceAnalytics")
install.packages("~/Downloads/blotter_0.9.1741.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/quantstrat_0.9.1739.tar.gz", repos = NULL, type = "source")
library("quantstrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mtcars
mean(mtcards[,1])
mean(mtcars[,1])
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
mtcars
mtcars
install_from_swirl("Exploratory Data Analysis")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
main()
0
library(mpg)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality, xlab="Month",ylab="Ozone (ppb)", col.axis = "blue", col.lab="red")
boxplot(Ozone~Month,airquality, xlab="Month",ylab="Ozone (ppb)", col.axis = "blue", col.lab="red",main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
plot(airquality$Wind,airquality$Ozone)
with(airquality, plot(airquality$Wind, airquality$Ozone))
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New
| York City")
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par('fg')
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main="Wind and Ozone in NYC")
a
x
may
may <- airquality
may <- subset(airquality, Month==5)
plot(may$Wind, may$Ozone, col="blue")
plot(may$Wind, may$Ozone, col="blue",pch=17)
plot(may$Wind, may$Ozone,col="blue",pch=17)
points(may$Wind, may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
plot(notmay$Wind, notmay$Ozone,col="red",pch=17)
plot(notmay$Wind, notmay$Ozone,col="red",pch=8)
points(notmay$Wind, notmay$Ozone,col="red",pch=8)
legend("topright",c(17,8),c("blue","red"),c ("May","Other Months") )
legend("topright",c(17,8),c("blue","red"),c("May","Other Months") )
legend()
legend(topright)
legend("topright")
skip()
abline(h-10)
abline(h-10)
absline(h-10)
abline(h=10)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow(c(1,2)))
par(mfrow = (1,2))
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
mtext("Ozone and Weather in New
aSF
WAFD
dasfasdf
a
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis3.R')
?reshape2
setwd("~/RCoursera/Getting_and_Cleaning_Data/Assignment")
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
features
actLabel
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
featuresN
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis.R')
source('~/Dropbox/DataCamp/Matrices.R')
star_wars_matrix
star_wars_matrix.names(region)
colnames(region)
star_wars_matrix <- colnames(region)
star_wars_matrix
source('~/Dropbox/DataCamp/Matrices.R')
star_wars_matrix
?colnames
colnames(region) <- star_wars_matrix
colnames(star_wars_matrix) <- region
star_wars_matrix
rownames(star_wars_matrix) <- titles
star_wars_matrix
source('~/Dropbox/DataCamp/Matrices.R')
source('~/Dropbox/DataCamp/Matrices.R')
worldwide_vector
source('~/Dropbox/DataCamp/Matrices.R')
source('~/Dropbox/DataCamp/Matrices.R')
source('~/Dropbox/DataCamp/Matrices.R')
source('~/Dropbox/DataCamp/Matrices.R')
source('~/Dropbox/DataCamp/Matrices.R')
swirl()
library(swirl)
swirl()
airquality
head(airquality)
xyploy(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality, col="red")
xyplot(Ozone~Wind,airquality, col="red",pch=8, "Big Apple Data")
?pch
xyplot(Ozone~Wind,airquality, col="red",pch=8, main="Big Apple Data")
xyplot(Ozone~Wind,data=airquality, col="red",pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(as.factor(Month), airquality)
xyplot(Ozone~Wind | as.factor(Month), airquality)
xyplot(Ozone~Wind | as.factor(Month), airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[[x.limits]]
p[["x.limits"]]
f
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source('/Library/Frameworks/R.framework/Versions/3.3/Resources/library/swirl/Courses/Exploratory_Data_Analysis/Lattice_Plotting_System/plot1.R')
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
(pathtofile("plot2.R"),local=TRUE)
pathtofile("plot2.R"),local=TRUE
pathtofile("plot2.R",local=TRUE)
source(pathtofile("plot2.R"),local=TRUE)
diamons
diamonds
str(diamons)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut, data="diamonds", strip=FALSE, pch=20, xlab = myxlab, ylab = myylab)
xyplot(price~carat | color*cut, data=diamonds, strip=FALSE, pch=20, xlab = myxlab, ylab = myylab)
xyplot(price~carat | color*cut, data=diamonds, strip=FALSE, pch=20, xlab = myxlab, ylab = myylab,main=mymain)
xyplot(price~carat | color*cut, data=diamonds, pch=20, xlab = myxlab, ylab = myylab,main=mymain)
class(xyplot())
class(xyplot
sadf
class(xyplot)
xyplot()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
swirl()
colr()
color()
sample(colors(), 10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette((c("red","blue")))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(colors = c("red","blue"))
p2 <- colorRampPalette(c("red","blue"))
p2 <- colorRampPalette(c("red","yellow"))
p2
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"))
p3 <- colorRampPalette(c("blue","green"), alpha=.5)
p3
p3(5)
rgb(0,0.5,0.5)
plot(x,y,pch=19,rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5),alpha=.3)
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(2,"BuGn")
cols <- brewer.pal(3,"BuGn")
showME
showMe
showMe(cols)
pal <- colorRampPalette()
pal <- colorRampPalette
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
??geom
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
?ggplot
qplot(votes, rating, data = movies)
library(movies)
?geom_smooth
?lattice
swirl()
str(mpg)
qplot(disp,hwy,mpg)
qplot(disp,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color=drv)
qplot(displ,hwy,data=mpg, color=drv, geom = c("point","smoot"))
qplot(displ,hwy,data=mpg, color=drv, geom = c("point","smooth"))
qplot(hwy,mpg,colors(drv))
qplot(hwy,data=mpg,colors(drv))
qplot(hwy,data=mpg,color=drv)
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data = mpg, geom = boxplot())
qplot(drv,hwy,data = mpg, geom = boxplot("boxplot"))
qplot(drv,hwy)
qplot()
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot", color=manufactuter)
qplot(drv,hwy,data=mpg,geom="boxplot", color=manufacturer)
hist(hwy,data=mpg,fill=drv)
hist()
hist(hwy,data=mpg,fill="drv")
hist(hwy,data=mpg,fill="drv")
skip()
qplot(displ,hwy,data=mpg,facets = ". ~ drv")
qplot(displ,hwy,data=mpg,facets = . ~ drv)
hist(hwy,data=mpg,facets=drv ~ ., binwidth=2)
qplot(hwy,data=mpg,facets=drv ~ ., binwidth=2)
main()
main()
main()
qplot(displ,hwy,data=mpg,geom=c("point","smooth", facets=.~drv))
qplot(displ,hwy,data=mpg,geom=c("point","smooth"), facets=.~drv)
g <- ggplot(mpg, aes(displ,hwy))
g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth=lm
g+geom_point()+geom_smooth="lm"
skip(0)
skip()
facet_grid <- g+geom_point()+geom_smooth="lm",facet=. ~ drv
facet_grid <- g+geom_point()+geom_smooth="lm",facet=". ~ drv"
skip()
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle ="Swirl Rules!"
facet_grid <- g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle ="Swirl Rules!"
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+labs("Swirl Rules!")
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=.5)+geom_smooth(method="lm") + facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,color=drv)
g+geom_point(size=4,alpha=1/2,color= aes(drv))
skip()
g
g + geom_point(aes(color=drv) + labs(title="Swirl Rules!")) + labs(x="Displacement",y="Hwy Mileage")
g + geom_point(aes(color=drv) + labs(title="Swirl Rules!") + labs(x="Displacement",y="Hwy Mileage")
adfs
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color = drv), size=1, alpha=1/2)+geom_smooth(size=4,linetype=3,method=lm,se=FALSE)
g+geom_point(aes(color = drv), size=1, alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color = drv), size=2, alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
theme_bw <- g+geom_point(aes(color=drv),theme_bw("Times"))
theme_bw <- g+geom_point(aes(color=drv),theme_bw="Times")
theme_bw <- g+geom_point(aes(color=drv),base_family="Times")
theme_bw <- g+geom_point(aes(color=drv),base_family=Times)
skip()
qlot()
qplot()
plot(myx,myy,type="l", ylim = c(-3,3))
g
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
geo_line()
g+geo_line()
geom_line()
g+geom_line() + ylim(-3,3)
coord_cartesian <- g+geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g + ggplot(displ,hwy, color=factor(year))
g
g <- ggplot(mpg,aes(x=displ,y=hwy),color=factor(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy),color=factor(year))
g <- ggplot(mpg,aes(x=displ,y=hwy),color=factor(year)))
g + ggplot(mpg,aes(x=displ,y=hwy),color=factor(year)))
g + ggplot(mpg,aes(x=displ,y=hwy),color=factor(year))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(formula(drv~cyl),margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method="lm",se=FALSE,size=2,color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage", title="Swirl Rules!")
