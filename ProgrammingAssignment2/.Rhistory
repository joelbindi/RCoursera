h = 1:1000
h
mean(h)
EMA(h)
plot(h)
install.packages("quantmod")
EMA(h)
h
h = h+h
h
mean(h)
h/12341234124
1-9
(1-2)
1231234/1234123412423
pi
print h
h
h
h = 12:43
h
plot h
plot(h)
demo()
demo(graphics)
demo(Japanese)
demo(package = .packages(all.available = TRUE))
demo(image())
demos)quantmod::add_DEMA()
demos.quantmod()
demos(quantmod)
demo(chartSeries)
demo(quantmod)
demo(lattice)
demo(graphics.off(Hershey))
demo(zoo)
help
help()
aefsd
demos
demo
demo(zoo)
demo()
http://citibank.com.au/
install.packages(z00)
install.packages(zoo)
library("zoo", lib.loc="/usr/local/lib/R/3.2/site-library")
library("zoo", lib.loc="/usr/local/lib/R/3.2/site-library")
install.packages(zoo)
library("zoo")
install.packages(zoo)
aapl
aapl<-read.zoo("aapl.csv", + sep=",", header=TRUE, format = ("%Y-%m-%d"))
plot(aapl)
aapl = 1
aapl
aapl<-read.zoo("aapl.csv", + sep=",", header=TRUE, format = ("%Y-%m-%d"))
library("quantmod", lib.loc="/usr/local/lib/R/3.2/site-library")
install.packages(c("boot", "Matrix", "mgcv", "nlme", "nnet"), lib="/usr/local/Cellar/r/3.2.3/R.framework/Versions/3.2/Resources/library")
install.packages("Quandl")
Quandl("YAHOO/ASX_FMG_AX")
library("Quandl", lib.loc="/usr/local/lib/R/3.2/site-library")
Quandl("YAHOO/ASX_FMG_AX")
Quandl("YAHOO/ASX_FMG_AX")
library("curl", lib.loc="/usr/local/lib/R/3.2/site-library")
FMG = Quandl("YAHOO/ASX_FMG_AX")
plot(FMG)
FMG
getwd()
cd RStudio
getwd()
getwd()
cd()
ls()
dir()
39
s = 3214234
s
library(datasets)
data(iris)
?iris
class(iris)
iris
mean(iris[,1])
lapply(iris,mean[,1])
apply(iris[,1], mean)
mean(iris[101:150,1])
apply(iris[, 1:4], 1, mean)
?apply
apply(iris[, 1:4], 2, mean)
?rnorm
install.packages("gfortran")
library(datasets)
data(mtcars)
data(mtcars)
?mtcars
?rnorm
install.packages("quantstrat", repos="http://R-Forge.R-project.org", type="source")
install.packages("quantstrat", repos="http://R-Forge.R-project.org", type="source")
install.packages("~/Downloads/blotter_0.9.1741.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/quantstrat_0.9.1739.tar.gz", repos = NULL, type = "source")
install.packages("PerformanceAnalytics")
install.packages("~/Downloads/blotter_0.9.1741.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/quantstrat_0.9.1739.tar.gz", repos = NULL, type = "source")
library("quantstrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mtcars
mean(mtcards[,1])
mean(mtcars[,1])
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
mtcars
mtcars
library(datasets)
mtcars
cyl4 <- mtcars[,2]
cyl4
ncyl4 <- mtcars(x == 4)
ncyl4 <- cyl4(x == 4)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcards$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
x['8']
x['4']
x['8'] - x['4']
debug(ls)
debug(ls)
exit()
?debug(ls)
undebug(ls)
sadf
asdfasdf
Q
library(datasets)
data(iris)
str(iris)
x <- subset(iris, species == "virginica")$Sepal.Length
x <- subset(iris, Species == "virginica")$Sepal.Length
x <- subset(iris, Species == "virginica")$Sepal.Length
mean(x[!is.na(x)])
mean(x[!is.na(x)])
numeric(6.588)
x <- tapply(mtcars$hp,mtcars$cyl,mean)
x['8'] - x['4']
apply(iris[, 1:4], 2, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
exit()
main()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unqiue)
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
landmass
table(flags$landmass)
table(flags$animate)
animate <- tapply(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
flags
tapply(flags$population, flags$landmass, summary)
main()
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
setwd("~/R/ProgrammingAssignment2")
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
source('~/R/ProgrammingAssignment2/makeVector.R')
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
x
getwd()
setwd("~/R/ProgrammingAssignment2")
x = rbind(c(1, -1/4), c(-1/4, 1))
x
m = makeCacheMatrix(x)
source('~/R/ProgrammingAssignment2/makeVector.R')
m = makeCacheMatrix(x)
m
m$get()
source('~/R/ProgrammingAssignment2/makeVector.R')
cacheSolve(m)
source('~/R/ProgrammingAssignment2/inverseMatrix.R')
str(x)
str(f)
f <- gl(40,10)
str(f)
summary(f)
detach("package:swirl", unload=TRUE)
library("quantstrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:quantmod", unload=TRUE)
detach("package:quantstrat", unload=TRUE)
library("quantstrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
demo()
demo(bbandParameters)
demo(bbands)
detach("package:FinancialInstrument", unload=TRUE)
detach("package:TTR", unload=TRUE)
detach("package:xts", unload=TRUE)
detach("package:zoo", unload=TRUE)
demo(faber)
demo(pair_trade)
